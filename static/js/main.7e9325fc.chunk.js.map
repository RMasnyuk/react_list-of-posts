{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js","images/user.png"],"names":["User","props","user","users","find","id","userId","react_default","a","createElement","className","name","href","email","address","city","Comment","src","logo","alt","authorEmail","authorName","comment","CommentList","postComments","comments","filter","postId","map","components_Comment","key","body","Fragment","Post","title","components_User","userList","text","components_CommentList","post","PostList","postList","list","element","components_Post","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","posts","foundPost","loading","loaded","disabled","handleClick","bind","assertThisInitialized","filterPosts","loadData","event","inputValue","target","value","trim","toLowerCase","setState","includes","url","fetch","then","res","json","_this2","Promise","all","_ref","_ref2","slicedToArray","type","onInput","placeholder","components_PostList","length","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7e9325fc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  const user = props.users.find(user => user.id === props.userId);\r\n  return (\r\n    <div className=\"author\">\r\n      <span>{user.name}: </span>\r\n      <span><a href={'mailto:'}>{user.email}</a></span>\r\n      <p>from {user.address.city}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport logo from '../images/user.png'\r\n\r\nfunction Comment(props) {\r\n  return (\r\n    <div className=\"comment\">\r\n      <p><img src={logo} alt=\"user\"/><a href={'mailto: ' + props.authorEmail}>{props.authorName}</a></p>\r\n      <p className=\"commentText\">{props.comment}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Comment;\r\n","import React from 'react';\r\nimport Comment from \"./Comment\";\r\n\r\nfunction CommentList(props) {\r\n  const commentList = props.comments.filter(comment => comment.postId === props.postId);\r\n\r\n  const postComments = commentList.map(comment => {\r\n    return <Comment key={comment.id} authorEmail={comment.email} authorName={comment.name} comment={comment.body}/>\r\n  });\r\n  return (\r\n    <>\r\n      {postComments}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CommentList;\r\n","import React from 'react';\r\nimport User from \"./User\";\r\nimport CommentList from \"./CommentList\";\r\n\r\nfunction Post(props) {\r\n  return (\r\n    <li>\r\n      <p className=\"title\">{props.title}</p>\r\n      <User users={props.userList} userId={props.userId}/>\r\n      <p className=\"text\">{props.text}</p>\r\n      <CommentList comments={props.comments} postId={props.post}/>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport Post from \"./Post\";\r\n\r\nfunction PostList(props) {\r\n  const postList = props.list.map(element => {\r\n    return (\r\n      <Post key={element.id}\r\n            title={element.title}\r\n            text={element.body}\r\n            userList={props.users}\r\n            userId={element.userId}\r\n            comments={props.comments}\r\n            post={element.id}/>\r\n    );\r\n  });\r\n  return (\r\n    <ul>\r\n      {postList}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default PostList;\r\n","import React, {Component} from 'react';\r\nimport PostList from \"./components/PostList\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      posts: [],\r\n      users: [],\r\n      comments: [],\r\n      foundPost: [],\r\n      loading: false,\r\n      loaded: false,\r\n      disabled: false\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.filterPosts = this.filterPosts.bind(this);\r\n    this.loadData = this.loadData.bind(this);\r\n\r\n  }\r\n\r\n  filterPosts(event) {\r\n    const inputValue = event.target.value.trim().toLowerCase();\r\n    this.setState({\r\n      foundPost: this.state.posts.filter(post => {\r\n        return post.title.includes(inputValue) || post.body.includes(inputValue)\r\n      })\r\n    })\r\n  }\r\n\r\n  loadData(url) {\r\n    return fetch(url)\r\n      .then(res => res.json())\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({\r\n      loading: true,\r\n      disabled: true\r\n    });\r\n\r\n    Promise.all([\r\n      this.loadData('https://jsonplaceholder.typicode.com/posts'),\r\n      this.loadData('https://jsonplaceholder.typicode.com/users'),\r\n      this.loadData('https://jsonplaceholder.typicode.com/comments')\r\n    ])\r\n      .then(([posts, users, comments]) => this.setState({\r\n          loaded: true,\r\n          posts: posts,\r\n          users: users,\r\n          comments: comments\r\n        })\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.loaded\r\n          ? (\r\n            <div>\r\n              <input type=\"text\" onInput={this.filterPosts} placeholder=\"search posts\"/>\r\n              <PostList list={!this.state.foundPost.length\r\n                ? this.state.posts\r\n                : this.state.foundPost} users={this.state.users} comments={this.state.comments}/>\r\n            </div>\r\n          )\r\n          : (\r\n            <div className=\"container\">\r\n              <button className=\"button\" onClick={this.handleClick} disabled={this.state.disabled}>{this.state.loading\r\n                ? 'Loading...'\r\n                : 'Load'}\r\n              </button>\r\n            </div>\r\n          )\r\n        }\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/user.471a1ad3.png\";"],"sourceRoot":""}